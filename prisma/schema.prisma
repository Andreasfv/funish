// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    name          String?
    email         String?   @unique
    emailVerified DateTime?

    punishments  Punishment[] @relation("givenPunishments")
    receivedPunishments Punishment[] @relation("receivedPunishments")

    role          Role     @default(ORG_MEMBER)
    image         String?
    organizationId String?
    organization  Organization? @relation(fields: [organizationId], references: [id])
    posts         Post[]

    accounts      Account[]
    sessions      Session[]

    @@index([organizationId])
}

model PunishmentType {
    id        String   @default(cuid()) @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   
    description String?
    quantityToFulfill  Int
    organization Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    Punishments Punishment[]
    PunishmentFromConversion PunishmentConversion[] @relation("PunishmentConversionFrom")
    PunishmentToConversion PunishmentConversion[] @relation("PunishmentConversionTo")
    
    @@unique([name, organizationId])
    @@id([id, name, organizationId])
    @@index([organizationId])
}

model PunishmentConversion {
    id        String   @default(cuid()) @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    organization Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    from      PunishmentType @relation(name: "PunishmentConversionFrom", fields: [fromId], references: [id])
    fromId    String
    to        PunishmentType @relation(name: "PunishmentConversionTo", fields: [toId], references: [id])
    toId      String
    rate      Float

    @@id([id, organizationId])
    @@unique([fromId, toId, organizationId])
    @@index([toId])
    @@index([organizationId])
}

model PunishmentReason {
    id        String   @default(cuid()) @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   
    organization Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    description String?
    Punishments Punishment[]

    @@id([id, organizationId])
    @@unique([name, organizationId])
    @@index([organizationId])
}

model Punishment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(name: "receivedPunishments", fields: [userId], references: [id])
    userId    String
    createdBy User     @relation(name: "givenPunishments", fields: [createdById], references: [id])
    createdById String
    type      PunishmentType @relation(fields: [typeId], references: [id])
    typeId    String
    reason    PunishmentReason @relation(fields: [reasonId], references: [id])
    reasonId  String
    organization Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    description String?
    proof     String?
    reedemed  Boolean @default(false)
    quantity  Int     @default(1)
    approved  Boolean @default(false)

    @@index([userId])
    @@index([createdById])
    @@index([typeId])
    @@index([organizationId])
    @@index([reasonId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Organization {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique

    users     User[]
    posts     Post[]
    punishments Punishment[]
    punishmentReasons PunishmentReason[]
    punishmentTypes PunishmentType[]
    punishmentConversions PunishmentConversion[]
}

model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    published Boolean  @default(false)
    title     String
    content   String?
    organization Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String

    @@index([authorId])
    @@index([organizationId])
}

enum Role {
    SUPER_ADMIN
    ORG_ADMIN
    ORG_MEMBER
}